#lang racket
(require racket/match)
(require "queue.rkt")

(provide (all-defined-out))

(define ITEMS 5)

;; ATENȚIE: Pentru această etapă a temei este necesar să implementați
;;          întâi TDA-ul queue în fișierul queue.rkt.
;; Reveniți la sarcinile din acest fișier după ce ați implementat tipul 
;; queue și ați verificat implementarea folosind checker-ul.


; Structura counter nu se modifică.
; Ceea ce se modifică este implementarea câmpului queue:
; - în loc de listă, acesta va fi o coadă (o structură de tip queue)
; - acest lucru nu este vizibil în definiția structurii counter,
;   ci în implementarea operațiilor acestui tip de date (tipul counter)
(define-struct counter (index tt et queue) #:transparent)


; TODO
; Actualizați funcțiile de mai jos astfel încât ele să folosească
; o structură de tip queue pentru reprezentarea cozii de persoane.
; Elementele cozii continuă să fie perechi (nume . nr_produse).
; Este esențial să respectați "bariera de abstractizare", adică să
; operați cu coada doar folosind interfața acestui TDA:
; - empty-queue
; - queue-empty?
; - enqueue
; - dequeue
; - top
; Obs: Doar câteva funcții vor necesita actualizări.
(define (empty-counter index)           ; testată de checker
  (counter index 0 0 empty-queue))

(define (update f counters index)
  (map (lambda (x) (if ( = (counter-index x) index)
                        (f x)
                        x)) counters ))

(define tt+
  (lambda (C)
    (lambda (minutes_to_be_added)
      (struct-copy counter C [ tt (+ minutes_to_be_added (counter-tt C) )]))))

(define et+
  (lambda (C)
    (lambda (minutes_to_be_added_et)
      (struct-copy counter C [ et (+ minutes_to_be_added_et (counter-et C) )]))))

(define et+_tt+
  (lambda (C)
    (lambda (minutes_to_be_added_et_tt)
      (struct-copy counter C [ tt (+ minutes_to_be_added_et_tt (counter-tt C) )] [ et (+ minutes_to_be_added_et_tt (counter-et C) )]))))


(define (add-to-counter name items)     ; testată de checker
  (λ (C)                                ; nu modificați felul în care funcția își primește argumentele
    (if (queue-empty? (counter-queue C))
          (make-counter (counter-index C) (+ items (counter-tt C)) (+ items (counter-et C)) ( enqueue (cons name items) (counter-queue C)))
          (make-counter (counter-index C) (+ items (counter-tt C)) (counter-et C) ( enqueue (cons name items) (counter-queue C))))))



(define (min-function f counters)
  (if(null? counters)
     '();
     (cons (counter-index (helepr-min-function f counters (car counters))) ( f (helepr-min-function f counters (car counters))))))

(define (helepr-min-function f counters acc)
  (cond
    ((null? counters) acc)
    (( < (f (car counters)) (f acc)) (helepr-min-function f (cdr counters) (car counters) ))
    ( else ( helepr-min-function f (cdr counters) acc))))

(define (min-tt counters) (min-function (lambda (C) (counter-tt C)) counters))
(define (min-et counters) (min-function (lambda (C) (counter-et C)) counters))


(define (remove-first-from-counter C)
  (cond
   ((queue-empty? (counter-queue C)) C)
   ((queue-empty? (dequeue (counter-queue C)))(struct-copy counter C [tt 0] [et 0] [queue empty-queue]))             
   (else (struct-copy counter C [tt (- (counter-tt C) (counter-et C))] [et (cdr (top (dequeue (counter-queue C)))) ] [queue (dequeue (counter-queue C))]) ))) 


; TODO
; Implementați o funcție care calculează starea unei case după un număr dat de minute.
; Funcția presupune, fără să verifice, că în acest timp nu a ieșit nimeni din coadă, 
; deci va avea efect doar asupra câmpurilor tt și et.
; (cu alte cuvinte, este responsabilitatea utilizatorului să nu apeleze această funcție
; cu minutes > timpul până la ieșirea primului client din coadă)
; Atenție: casele fără clienți nu trebuie să ajungă la timpi negativi!
(define (pass-time-through-counter minutes)
  (λ (C)
    (if (<= minutes (counter-et C))
        (struct-copy counter C [tt (- (counter-tt C) minutes)] [et (- (counter-et C) minutes)] )
        (struct-copy counter C [tt 0] [et 0]))))
  



(define (min-function-zero-diff f counters)
  (cond
    ((null? counters) '())
    ((= 1 (length counters)) (if (zero? (length (counter-queue (car counters))))
                                 null
                                 (cons ( counter-index (car counters)) ( f (car counters)))
                                 ))
    ( else (if (zero? (length (counter-queue (car counters))))
                                 (min-function-zero-diff f (cdr counters))
                                 (cons (counter-index (helepr-min-function-zero-diff f counters (car counters) )) ( f (helepr-min-function-zero-diff f counters (car counters))))
                                 )
      )))

(define (helepr-min-function-zero-diff f counters acc)
  (cond
    ((null? counters) acc)
    ((zero? (length (counter-queue (car counters)))) (helepr-min-function-zero-diff f (cdr counters) acc ))
    ((zero? (f (car counters))) (helepr-min-function-zero-diff f (cdr counters) (cadr counters) ) )
    (( < (f (car counters)) (f acc)) (helepr-min-function-zero-diff f (cdr counters) (car counters) ))
    ( else ( helepr-min-function-zero-diff f (cdr counters) acc))))

(define (min-tt-zero-diff counters) (min-function-zero-diff (lambda (C) (counter-tt C)) counters)) ; folosind funcția de mai sus
(define (min-et-zero-diff counters) (min-function-zero-diff (lambda (C) (counter-et C)) counters)) ; folosind funcția de mai sus



(define (avrage counters )
  (/ (avrage-helper-sum counters) (length counters)))

(define (avrage-helper-sum counters)
   (if (empty? counters) 0
      (+ (counter-tt (first counters)) (avrage-helper-sum (rest counters)))))
  
(define (add-all counters average fast-counters)
  (if (> (avrage (append counters fast-counters)) average)
      (add-all (append counters (list (empty-counter (+ (+ 1 (length counters)) (length fast-counters) )))) average fast-counters)
      counters))


;;O FACEM PE BUCATI MAI INTAI TOP SI SCOATEM ACC SI APOI SCOATEM EFECTIV DEQUEUE


(define (find-list-eliminated C minutes acc)
  (if (>= minutes (counter-et C))
      (if (queue-empty? (counter-queue C))
          acc
          (find-list-eliminated (remove-first-from-counter C) (- minutes (counter-et C)) (append acc (list (cons (cons (counter-index C) (car (top (counter-queue C)))) (- minutes (counter-et C))) )) ))
      acc))


(define (concatanate-all-eliminations counters minutes acc )
  (cond
    ((null? counters) acc)
    ( else (concatanate-all-eliminations (cdr counters) minutes (append acc (find-list-eliminated (car counters) minutes '() )) ))))



(define ( time-pass minutes C)
    (cond
     (( >= minutes (counter-tt C) ) (empty-counter (counter-index C))) 
     (( >= minutes (counter-et C) ) ( time-pass (- minutes (counter-et C) ) (remove-first-from-counter C)) )
     (( < minutes (counter-et C) ) ((pass-time-through-counter minutes)C ))))


(define (update-all counters minutes acc)
  (if (null? counters)
      acc
      (update-all (cdr counters) minutes (append acc (list (time-pass minutes (car counters)))) )))

(define (sort-cresc-by-et list)
  (sort list
        (lambda (c1 c2) (< (counter-et c1) (counter-et c2)))))

(define (sort-cresc-by-turn list)
  (sort list
        (lambda (c1 c2) (if (= (cdr c1) (cdr c2))
                            (< (caar c1) (caar c2))
                            (> (cdr c1) (cdr c2))))))
(define (what-is-ok L acc)
  (if (null? L)
      acc
      (what-is-ok (cdr L) (append acc (list (caar L))))))

; TODO
; Implementați funcția care simulează fluxul clienților pe la case.
; ATENȚIE: Față de etapa 2, apar modificări în:
; - formatul listei de cereri (parametrul requests)
; - formatul rezultatului funcției (explicat mai jos)
; requests conține 4 tipuri de cereri (3 moștenite din etapa 2 plus una nouă):
;   - (<name> <n-items>) - persoana <name> trebuie așezată la coadă la o casă            (ca înainte)
;   - (delay <index> <minutes>) - casa <index> este întârziată cu <minutes> minute       (ca înainte)
;   - (ensure <average>) - cât timp tt-ul mediu al tuturor caselor este mai mare decât
;                          <average>, se adaugă case fără restricții (case slow)         (ca înainte)
;   - <x> - trec <x> minute de la ultima cerere, iar starea caselor se actualizează
;           corespunzător (cu efect asupra câmpurilor tt, et, queue)                     (   NOU!   )
; Obs: Au dispărut cererile de tip remove-first, pentru a lăsa loc unui mecanism mai 
; sofisticat de a scoate clienții din coadă (pe măsură ce trece timpul).
; Sistemul trebuie să proceseze cele 4 tipuri de cereri în ordine, astfel:
; - persoanele vor fi distribuite la casele cu tt minim (dintre casele la care au voie)  (ca înainte)
; - când o casă suferă o întârziere, tt-ul și et-ul ei cresc (chiar dacă nu are clienți) (ca înainte)
; - tt-ul mediu (ttmed) se calculează pentru toate casele (și cele fast, și cele slow), 
;   iar la nevoie veți adăuga case slow una câte una, până când ttmed <= <average>       (ca înainte)
; - când timpul prin sistem avansează cu <x> minute, tt-ul, et-ul și queue-ul tuturor 
;   caselor se actualizează pentru a reflecta trecerea timpului; dacă unul sau mai mulți 
;   clienți termină de stat la coadă, ieșirile lor sunt contorizate în ordine cronologică.
; Rezultatul funcției serve va fi o pereche cu punct între:
; - lista sortată cronologic a clienților care au părăsit supermarketul
;   - fiecare element din listă va avea forma (index_casă . nume)
;   - dacă mai mulți clienți ies simultan, sortați-i crescător după indexul casei
; - lista caselor în starea finală (ca rezultatul din etapele 1 și 2)
; Obs: Pentru a contoriza ieșirile din cozi, puteți să lucrați într-o funcție ajutătoare
; (cu un parametru în plus față de funcția serve), pe care serve doar o apelează.

(define (serve-helper requests fast-counters slow-counters acc)
  
  (if (null? requests)
      (cons  (what-is-ok acc '()) (append fast-counters slow-counters))
      (match (car requests)
        [(list 'ensure average) (serve-helper (cdr requests) fast-counters (add-all slow-counters average fast-counters) acc) ]
        [(list 'delay index minutes) (serve-helper (cdr requests) (update (lambda (C) ((et+_tt+ C) minutes)) fast-counters index ) (update (lambda (C) ((et+_tt+ C) minutes)) slow-counters index ) acc)]
        [(list name n-items) ( cond
                             ((<= n-items ITEMS) (if ( <= (cdr(min-tt fast-counters)) (cdr(min-tt slow-counters)))
                                                  (serve-helper (cdr requests) (update (lambda (C) ((add-to-counter name n-items) C)) fast-counters (car(min-tt fast-counters)) ) slow-counters acc)
                                                  (serve-helper (cdr requests) fast-counters (update (lambda (C) ((add-to-counter name n-items) C)) slow-counters (car(min-tt slow-counters)) ) acc)))
                                             
                             (else  (serve-helper (cdr requests) fast-counters (update (lambda (C) ((add-to-counter name n-items) C)) slow-counters (car(min-tt slow-counters)) ) acc )))]
        [(list 'remove-first) (cond
                                ((not (null? (min-et-zero-diff fast-counters))) ( if (null? (min-et-zero-diff slow-counters))
                                                                                          (serve-helper (cdr requests) (update (lambda (C) (remove-first-from-counter C) ) fast-counters (car(min-et-zero-diff fast-counters)) ) slow-counters acc)
                                                                                          (cond
                                                                                            (( <= (cdr(min-et-zero-diff fast-counters)) (cdr(min-et-zero-diff slow-counters))) (serve-helper (cdr requests) (update (lambda (C) (remove-first-from-counter C) ) fast-counters (car(min-et-zero-diff fast-counters)) ) slow-counters acc))
                                                                                            (else (serve-helper (cdr requests) fast-counters (update (lambda (C) (remove-first-from-counter C) ) slow-counters (car(min-et-zero-diff slow-counters)) ) acc)))))
                                ( (not (null? (min-et-zero-diff slow-counters))) (serve-helper (cdr requests) fast-counters (update (lambda (C) (remove-first-from-counter C) ) slow-counters (car(min-et-zero-diff slow-counters)) )acc))
                                ( else (serve-helper (cdr requests) fast-counters slow-counters acc)))]
                                
        [ minutes  (serve-helper (cdr requests) (update-all fast-counters minutes '() ) (update-all slow-counters minutes '() )  (append acc (sort-cresc-by-turn (concatanate-all-eliminations (append fast-counters slow-counters)  minutes '() )) )) ])))


(define (serve requests fast-counters slow-counters)
  (serve-helper requests fast-counters slow-counters '()))
       